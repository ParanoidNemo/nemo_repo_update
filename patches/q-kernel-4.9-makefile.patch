From b8d024188ab0838a0b0f5d11a91e21794a38c33a Mon Sep 17 00:00:00 2001
From: ix5 <ix5@users.noreply.github.com>
Date: Tue, 20 Aug 2019 20:04:25 +0200
Subject: [PATCH] Update makefiles for Android Q and clang

Clang is the only host compiler that works for now, need to set
`TARGET_KERNEL_USE_CLANG := true`.

Clang version expected on Q is 9.0.6.

ccache seems to work so far, using the Ubuntu 18.04 package.

TODO: GCC for host compilation is still not working, possibly because
some directories are messed up or path_interposer doing strange things.
```
  HOSTCC  scripts/basic/fixdep
[...]/kernel/scripts/basic/fixdep.c:105:23:
  fatal error: sys/types.h: No such file or directory
 #include <sys/types.h>
```

TODO: Amend build guides to include perl as a prerequisite!
(Though probably installed by default on pretty much any machine)
https://developer.sony.com/develop/open-devices/guides/aosp-build-instructions/build-aosp-android-p-9-0-0#tutorial-step-2
---
 Android.bp                |  27 -----
 Android.mk                | 236 +++++++++++++++++++++++++-------------
 Makefile                  |   6 +-
 backports/compat/Makefile |   2 +-
 lib/Makefile              |   2 +-
 5 files changed, 159 insertions(+), 114 deletions(-)
 delete mode 100644 Android.bp

diff --git a/Android.bp b/Android.bp
deleted file mode 100644
index 4341e3a71dad..000000000000
--- a/Android.bp
+++ /dev/null
@@ -1,27 +0,0 @@
-cc_binary_host {
-    name: "unifdef",
-    srcs: ["scripts/unifdef.c"],
-    sanitize: {
-        never: true,
-    }
-}
-
-gensrcs {
-    name: "qseecom-kernel-includes",
-
-    // move to out/ as root for header generation because of scripts/unifdef
-    // storage - at the expense of extra ../ references
-    cmd: "pushd out && mkdir -p scripts && rm -f scripts/unifdef && ln -s ../../$(location unifdef) scripts/unifdef && ../$(location scripts/headers_install.sh) `dirname ../$(out)` ../ $(in) && popd",
-
-    tools: ["unifdef"],
-    tool_files: ["scripts/headers_install.sh"],
-    export_include_dirs: ["include/uapi"],
-    srcs: ["include/uapi/linux/qseecom.h"],
-    output_extension: "h",
-}
-
-cc_library_headers {
-    name: "qseecom-kernel-headers",
-    generated_headers: ["qseecom-kernel-includes"],
-    export_generated_headers: ["qseecom-kernel-includes"],
-}
diff --git a/Android.mk b/Android.mk
index f74c262caa3d..0b85cf57aa48 100644
--- a/Android.mk
+++ b/Android.mk
@@ -1,5 +1,6 @@
 # Copyright (C) 2012 The CyanogenMod Project
 # Copyright (C) 2015 Chirayu Desai
+# Copyright (C) 2018 Felix Elsner
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -20,21 +21,28 @@ ifeq ($(PRODUCT_PLATFORM_SOD),true)
 ifeq ($(SOMC_KERNEL_VERSION),4.9)
 
 KERNEL_SRC := $(call my-dir)
+# Absolute path - needed for GCC/clang non-AOSP build-system make invocations
+KERNEL_SRC_ABS := $(PWD)/$(call my-dir)
 
 ## Internal variables
-ifeq ($(OUT_DIR),out)
-KERNEL_OUT := $(shell pwd)/$(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ
-else
 KERNEL_OUT := $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ
-endif
+# Absolute path - needed for GCC/clang non-AOSP build-system make invocations
+KERNEL_OUT_ABS := $(PWD)/$(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ
 KERNEL_CONFIG := $(KERNEL_OUT)/.config
 KERNEL_OUT_STAMP := $(KERNEL_OUT)/.mkdir_stamp
+KERNEL_DTB_STAMP := $(KERNEL_OUT)/.dtb_stamp
+
+ifeq ($(call math_gt_or_eq,$(PLATFORM_SDK_VERSION),29),true)
+  KERNEL_ANDROID_Q_OR_HIGHER := true
+else
+  KERNEL_ANDROID_Q_OR_HIGHER := false
+endif
 
 TARGET_KERNEL_ARCH := $(strip $(TARGET_KERNEL_ARCH))
 ifeq ($(TARGET_KERNEL_ARCH),)
-KERNEL_ARCH := $(TARGET_ARCH)
+  KERNEL_ARCH := $(TARGET_ARCH)
 else
-KERNEL_ARCH := $(TARGET_KERNEL_ARCH)
+  KERNEL_ARCH := $(TARGET_KERNEL_ARCH)
 endif
 
 # kernel configuration - mandatory:
@@ -46,14 +54,14 @@ KERNEL_DEFCONFIG_SRC := $(KERNEL_SRC)/arch/$(KERNEL_DEFCONFIG_ARCH)/configs/$(KE
 
 TARGET_KERNEL_HEADER_ARCH := $(strip $(TARGET_KERNEL_HEADER_ARCH))
 ifeq ($(TARGET_KERNEL_HEADER_ARCH),)
-KERNEL_HEADER_ARCH := $(KERNEL_ARCH)
+  KERNEL_HEADER_ARCH := $(KERNEL_ARCH)
 else
-KERNEL_HEADER_ARCH := $(TARGET_KERNEL_HEADER_ARCH)
+  KERNEL_HEADER_ARCH := $(TARGET_KERNEL_HEADER_ARCH)
 endif
 
 KERNEL_HEADER_DEFCONFIG := $(strip $(KERNEL_HEADER_DEFCONFIG))
 ifeq ($(KERNEL_HEADER_DEFCONFIG),)
-KERNEL_HEADER_DEFCONFIG := $(KERNEL_DEFCONFIG)
+  KERNEL_HEADER_DEFCONFIG := $(KERNEL_DEFCONFIG)
 endif
 
 ifneq ($(BOARD_KERNEL_IMAGE_NAME),)
@@ -103,48 +111,121 @@ KERNEL_HEADERS_INSTALL_STAMP := $(KERNEL_OUT)/.headers_install_stamp
 KERNEL_MODULES_INSTALL := system
 KERNEL_MODULES_OUT := $(TARGET_OUT)/lib/modules
 
-# Target architecture cross compile
-TARGET_KERNEL_CROSS_COMPILE_PREFIX := $(strip $(TARGET_KERNEL_CROSS_COMPILE_PREFIX))
-ifeq ($(TARGET_KERNEL_CROSS_COMPILE_PREFIX),)
-KERNEL_TOOLCHAIN_PREFIX ?= arm-eabi-
+# Set up cross compilers
+ifeq ($(KERNEL_ANDROID_Q_OR_HIGHER),true)
+  # clang-r365631 is clang 9.0.3
+  CLANG_HOST_TOOLCHAIN := $(PWD)/prebuilts/clang/host/linux-x86/clang-r353983c/bin
+  GCC_HOST_TOOLCHAIN := $(PWD)/prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.17-4.8/x86_64-linux/bin
+  GCC_HOST_TOOLCHAIN_LIBEXEC := $(PWD)/prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.17-4.8/libexec/gcc/x86_64-linux/4.8.3
 else
-KERNEL_TOOLCHAIN_PREFIX ?= $(TARGET_KERNEL_CROSS_COMPILE_PREFIX)
+  # clang-4691093 is clang 6.0.2
+  CLANG_HOST_TOOLCHAIN := $(PWD)/prebuilts/clang/host/linux-x86/clang-4691093/bin
+  GCC_HOST_TOOLCHAIN := $(PWD)/prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.15-4.8/x86_64-linux/bin
+  GCC_HOST_TOOLCHAIN_LIBEXEC := $(PWD)/prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.15-4.8/libexec/gcc/x86_64-linux/4.8.3
 endif
 
-ifeq ($(KERNEL_TOOLCHAIN),)
-KERNEL_TOOLCHAIN_PATH := $(KERNEL_TOOLCHAIN_PREFIX)
+CLANG_CC := $(CLANG_HOST_TOOLCHAIN)/clang
+CLANG_HOSTCC := $(CLANG_HOST_TOOLCHAIN)/clang
+CLANG_HOSTCXX := $(CLANG_HOST_TOOLCHAIN)/clang++
+
+GCC_CC := $(PWD)/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android-
+GCC_HOSTCC := $(GCC_HOST_TOOLCHAIN)/gcc
+GCC_HOSTCXX := $(GCC_HOST_TOOLCHAIN)/gcc++
+GCC_HOSTAR := $(GCC_HOST_TOOLCHAIN)/ar
+GCC_HOSTLD := $(GCC_HOST_TOOLCHAIN)/ld
+
+KERNEL_TOOLCHAIN := $(PWD)/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin
+KERNEL_TOOLCHAIN_32BITS := $(PWD)/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin
+KERNEL_HOST_TOOLCHAIN := $(GCC_HOST_TOOLCHAIN)
+KERNEL_HOST_TOOLCHAIN_LIBEXEC := $(GCC_HOST_TOOLCHAIN_LIBEXEC)
+ifeq ($(TARGET_KERNEL_CLANG_COMPILE),true)
+  KERNEL_HOSTCC := $(CLANG_HOSTCC)
+  KERNEL_HOSTCXX := $(CLANG_HOSTCXX)
 else
-ifneq ($(KERNEL_TOOLCHAIN_PREFIX),)
-KERNEL_TOOLCHAIN_PATH := $(KERNEL_TOOLCHAIN)/$(KERNEL_TOOLCHAIN_PREFIX)
+  # On Q, only clang works OOTB as a host bootstrap compiler
+  ifeq ($(KERNEL_ANDROID_Q_OR_HIGHER),true)
+    KERNEL_HOSTCC := $(CLANG_HOSTCC)
+    KERNEL_HOSTCXX := $(CLANG_HOSTCXX)
+  else
+    KERNEL_HOSTCC := $(GCC_HOSTCC)
+    KERNEL_HOSTCXX := $(GCC_HOSTCXX)
+  endif
 endif
+KERNEL_HOSTAR := $(GCC_HOSTAR)
+KERNEL_HOSTLD := $(GCC_HOSTLD)
+
+# Target architecture cross compile
+TARGET_KERNEL_CROSS_COMPILE_PREFIX := $(strip $(TARGET_KERNEL_CROSS_COMPILE_PREFIX))
+KERNEL_TOOLCHAIN_PREFIX ?= $(TARGET_KERNEL_CROSS_COMPILE_PREFIX)
+
+# Kernel toolchain - Use for binutils via $(CROSS_COMPILE)ar, $(CROSS_COMPILE)ld etc.
+ifneq ($(KERNEL_TOOLCHAIN_PREFIX),)
+  KERNEL_TOOLCHAIN_PATH := $(KERNEL_TOOLCHAIN)/$(KERNEL_TOOLCHAIN_PREFIX)
 endif
 
 # If building for 64-bits with VDSO32 support - 32-bit toolchain here
 # Also, if building for AArch64, preferrably set an AArch32 toolchain here.
 TARGET_KERNEL_CROSS_COMPILE_32BITS_PREFIX := $(strip $(TARGET_KERNEL_CROSS_COMPILE_32BITS_PREFIX))
 ifeq ($(TARGET_KERNEL_CROSS_COMPILE_32BITS_PREFIX),)
-KERNEL_TOOLCHAIN_32BITS_PREFIX ?= arm-linux-androideabi-
+  KERNEL_TOOLCHAIN_32BITS_PREFIX := arm-linux-androideabi-
 else
-KERNEL_TOOLCHAIN_32BITS_PREFIX ?= $(TARGET_KERNEL_CROSS_COMPILE_32BITS_PREFIX)
+  KERNEL_TOOLCHAIN_32BITS_PREFIX := $(TARGET_KERNEL_CROSS_COMPILE_32BITS_PREFIX)
 endif
 
-ifeq ($(KERNEL_TOOLCHAIN_32BITS),)
-KERNEL_TOOLCHAIN_32BITS_PATH := $(KERNEL_TOOLCHAIN_32BITS_PREFIX)
-else
 ifneq ($(KERNEL_TOOLCHAIN_32BITS_PREFIX),)
-KERNEL_TOOLCHAIN_32BITS_PATH := $(KERNEL_TOOLCHAIN_32BITS)/$(KERNEL_TOOLCHAIN_32BITS_PREFIX)
+  KERNEL_TOOLCHAIN_32BITS_PATH := $(KERNEL_TOOLCHAIN_32BITS)/$(KERNEL_TOOLCHAIN_32BITS_PREFIX)
 endif
+
+ifneq ($(USE_CCACHE),)
+  ifeq ($(KERNEL_ANDROID_Q_OR_HIGHER),true)
+    # Prebuilt ccache is no longer shipped with Android since Q
+    ccache := /usr/bin/ccache
+  else
+    ccache := $(PWD)/prebuilts/misc/$(HOST_PREBUILT_TAG)/ccache/ccache
+  endif
+  # Check that the executable is here.
+  ccache := $(strip $(wildcard $(ccache)))
 endif
 
+# /usr/bin/perl is more reliable than /bin/perl
+KERNEL_PERL := /usr/bin/perl
+
+KERNEL_CROSS_COMPILE :=
+ifeq ($(TARGET_KERNEL_CLANG_COMPILE),true)
+  KERNEL_CROSS_COMPILE += CC="$(CLANG_CC)"
+  KERNEL_CROSS_COMPILE += CLANG_TRIPLE="aarch64-linux-gnu"
+endif
+KERNEL_CROSS_COMPILE += HOSTCC="$(KERNEL_HOSTCC)"
+KERNEL_CROSS_COMPILE += HOSTAR="$(KERNEL_HOSTAR)"
+KERNEL_CROSS_COMPILE += HOSTLD="$(KERNEL_HOSTLD)"
+KERNEL_CROSS_COMPILE += HOSTCXX="$(KERNEL_HOSTCXX)"
+KERNEL_CROSS_COMPILE += PERL=$(KERNEL_PERL)
 ifneq ($(USE_CCACHE),)
-    ccache := $(shell pwd)/prebuilts/misc/$(HOST_PREBUILT_TAG)/ccache/ccache
-    # Check that the executable is here.
-    ccache := $(strip $(wildcard $(ccache)))
+  KERNEL_CROSS_COMPILE += CROSS_COMPILE="$(ccache) $(KERNEL_TOOLCHAIN_PATH)"
+  KERNEL_CROSS_COMPILE += CROSS_COMPILE_ARM32="$(ccache) $(KERNEL_TOOLCHAIN_32BITS_PATH)"
+else
+  KERNEL_CROSS_COMPILE += CROSS_COMPILE="$(KERNEL_TOOLCHAIN_PATH)"
+  KERNEL_CROSS_COMPILE += CROSS_COMPILE_ARM32="$(KERNEL_TOOLCHAIN_32BITS_PATH)"
 endif
 
-KERNEL_CROSS_COMPILE := CROSS_COMPILE="$(ccache) $(KERNEL_TOOLCHAIN_PATH)"
-KERNEL_CROSS_COMPILE += CROSS_COMPILE_ARM32="$(KERNEL_TOOLCHAIN_32BITS_PATH)"
-ccache =
+ifeq ($(KERNEL_ANDROID_Q_OR_HIGHER),true)
+# Standard $(MAKE) evaluates to:
+# prebuilts/build-tools/linux-x86/bin/ckati --color_warnings --kati_stats MAKECMDGOALS=
+# which is forbidden by Android Q's new "path_interposer" tool
+KERNEL_PREBUILT_MAKE := $(PWD)/prebuilts/build-tools/linux-x86/bin/make
+# clang/GCC (glibc) host toolchain needs to be prepended to $PATH for certain
+# host bootstrap tools to be built. Also, binutils such as `ld` and `ar` are
+# needed for now.
+KERNEL_MAKE_EXTRA_PATH := $(KERNEL_HOST_TOOLCHAIN)
+ifneq ($(TARGET_KERNEL_CLANG_COMPILE),true)
+  KERNEL_MAKE_EXTRA_PATH := "$(KERNEL_HOST_TOOLCHAIN):$(KERNEL_HOST_TOOLCHAIN_LIBEXEC)"
+endif
+KERNEL_MAKE := \
+	PATH="$(KERNEL_MAKE_EXTRA_PATH):$$PATH" \
+	$(KERNEL_PREBUILT_MAKE)
+else
+KERNEL_MAKE := "make"
+endif # KERNEL_ANDROID_Q_OR_HIGHER
 
 define mv-modules
     mdpath=`find $(KERNEL_MODULES_OUT) -type f -name modules.order`;\
@@ -163,18 +244,6 @@ define clean-module-folder
     fi
 endef
 
-ifeq ($(HOST_OS),darwin)
-ifeq (1,$(filter 1,$(shell echo "$$(( $(PLATFORM_SDK_VERSION) >= 24 ))" )))
-  MAKE_FLAGS += C_INCLUDE_PATH=$(shell pwd)/external/elfutils/libelf/
-else
-  MAKE_FLAGS += C_INCLUDE_PATH=$(shell pwd)/external/elfutils/src/libelf/
-endif
-endif
-
-ifeq ($(TARGET_KERNEL_MODULES),)
-    TARGET_KERNEL_MODULES := no-external-modules
-endif
-
 $(KERNEL_OUT_STAMP):
 	$(hide) mkdir -p $(KERNEL_OUT)
 	$(hide) rm -rf $(KERNEL_MODULES_OUT)
@@ -186,74 +255,79 @@ $(KERNEL_OUT_STAMP):
 
 $(KERNEL_CONFIG): $(KERNEL_OUT_STAMP) $(KERNEL_DEFCONFIG_SRC)
 	@echo "Building Kernel Config"
-	$(MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_DEFCONFIG)
-	$(hide) if [ ! -z "$(KERNEL_CONFIG_OVERRIDE)" ]; then \
-			echo "Overriding kernel config with '$(KERNEL_CONFIG_OVERRIDE)'"; \
-			echo $(KERNEL_CONFIG_OVERRIDE) >> $(KERNEL_OUT)/.config; \
-			$(MAKE) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) oldconfig; fi
+	$(KERNEL_MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_DEFCONFIG)
 
-TARGET_KERNEL_BINARIES: $(KERNEL_OUT_STAMP) $(KERNEL_CONFIG) $(KERNEL_HEADERS_INSTALL_STAMP) | $(ACP)
-	@echo "Building Kernel"
-	$(MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(TARGET_PREBUILT_INT_KERNEL_TYPE)
-	$(hide) if grep -q 'CONFIG_OF=y' $(KERNEL_CONFIG) ; \
-			then \
-				echo "Building DTBs" ; \
-				$(MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) dtbs ; \
-			else \
-				echo "DTBs not enabled" ; \
-			fi ;
-	$(ACP) -fp $(KERNEL_DTB)/*.dtb $(KERNEL_DTB_OUT)/
+# TODO: Use non-PHONY target for qcom wifi modules
+ifeq ($(TARGET_KERNEL_MODULES),)
+    TARGET_KERNEL_MODULES := no-external-modules
+endif
+.PHONY: $(TARGET_KERNEL_MODULES)
+$(TARGET_KERNEL_MODULES):
 	$(hide) if grep -q 'CONFIG_MODULES=y' $(KERNEL_CONFIG) ; \
 			then \
 				echo "Building Kernel Modules" ; \
-				$(MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) modules && \
-				$(MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC) O=$(KERNEL_OUT) INSTALL_MOD_PATH=../../$(KERNEL_MODULES_INSTALL) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) modules_install && \
+				$(KERNEL_MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) modules && \
+				$(KERNEL_MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) INSTALL_MOD_PATH=../../$(KERNEL_MODULES_INSTALL) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) modules_install && \
 				$(mv-modules) && \
 				$(clean-module-folder) ; \
 			else \
 				echo "Kernel Modules not enabled" ; \
 			fi ;
 
-$(TARGET_KERNEL_MODULES): TARGET_KERNEL_BINARIES
+$(TARGET_PREBUILT_INT_KERNEL): $(KERNEL_OUT_STAMP) $(KERNEL_CONFIG) $(KERNEL_HEADERS_INSTALL_STAMP)
+	@echo "Building Kernel"
+	$(KERNEL_MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(TARGET_PREBUILT_INT_KERNEL_TYPE)
+
+$(KERNEL_DTB_STAMP): $(KERNEL_OUT_STAMP) $(KERNEL_CONFIG) | $(ACP)
+	$(hide) if grep -q 'CONFIG_OF=y' $(KERNEL_CONFIG) ; \
+			then \
+				echo "Building DTBs" ; \
+				$(KERNEL_MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) dtbs ; \
+			else \
+				echo "DTBs not enabled" ; \
+			fi ;
+	$(ACP) -fp $(KERNEL_DTB)/*.dtb $(KERNEL_DTB_OUT)/
+	$(hide) touch $@
 
-$(TARGET_PREBUILT_INT_KERNEL): $(TARGET_KERNEL_MODULES)
-	$(mv-modules)
-	$(clean-module-folder)
+$(TARGET_KERNEL_DTB): $(KERNEL_DTB_STAMP)
 
 $(KERNEL_HEADERS_INSTALL_STAMP): $(KERNEL_OUT_STAMP) $(KERNEL_CONFIG)
 	@echo "Building Kernel Headers"
 	$(hide) if [ ! -z "$(KERNEL_HEADER_DEFCONFIG)" ]; then \
 			rm -f ../$(KERNEL_CONFIG); \
-			$(MAKE) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_HEADER_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_HEADER_DEFCONFIG); \
-			$(MAKE) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_HEADER_ARCH) $(KERNEL_CROSS_COMPILE) headers_install; fi
+			$(KERNEL_MAKE) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_HEADER_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_HEADER_DEFCONFIG); \
+			$(KERNEL_MAKE) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_HEADER_ARCH) $(KERNEL_CROSS_COMPILE) headers_install; fi
 	$(hide) if [ "$(KERNEL_HEADER_DEFCONFIG)" != "$(KERNEL_DEFCONFIG)" ]; then \
 			echo "Used a different defconfig for header generation"; \
 			rm -f ../$(KERNEL_CONFIG); \
-			$(MAKE) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_DEFCONFIG); fi
+			$(KERNEL_MAKE) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_DEFCONFIG); fi
 	$(hide) if [ ! -z "$(KERNEL_CONFIG_OVERRIDE)" ]; then \
 			echo "Overriding kernel config with '$(KERNEL_CONFIG_OVERRIDE)'"; \
-			echo $(KERNEL_CONFIG_OVERRIDE) >> $(KERNEL_OUT)/.config; \
-			$(MAKE) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) oldconfig; fi
+			echo $(KERNEL_CONFIG_OVERRIDE) >> $(KERNEL_OUT_ABS)/.config; \
+			$(KERNEL_MAKE) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) oldconfig; fi
+	$(hide) touch $@
 
 # provide this rule because there are dependencies on this throughout the repo
 $(KERNEL_HEADERS_INSTALL): $(KERNEL_HEADERS_INSTALL_STAMP)
 
+.PHONY: kerneltags
 kerneltags: $(KERNEL_OUT_STAMP) $(KERNEL_CONFIG)
-	$(MAKE) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) tags
+	$(KERNEL_MAKE) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) tags
 
-kernelconfig: $(KERNEL_OUT_STAMP)
-	$(MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_DEFCONFIG)
+.PHONY: kernelconfig
+kernelconfig: $(KERNEL_OUT_STAMP) | $(ACP)
+	$(KERNEL_MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_DEFCONFIG)
 	env KCONFIG_NOTIMESTAMP=true \
-		 $(MAKE) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) menuconfig
+		 $(KERNEL_MAKE) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) menuconfig
 	env KCONFIG_NOTIMESTAMP=true \
-		 $(MAKE) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) savedefconfig
-	cp $(KERNEL_OUT)/defconfig $(KERNEL_DEFCONFIG_SRC)
+		 $(KERNEL_MAKE) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) savedefconfig
+	$(ACP) $(KERNEL_OUT)/defconfig $(KERNEL_DEFCONFIG_SRC)
 
 ifeq ($(TARGET_NEEDS_DTBOIMAGE),true)
 TARGET_PREBUILT_DTBO := $(KERNEL_DTBO_OUT)
-$(TARGET_PREBUILT_DTBO): TARGET_KERNEL_BINARIES $(AVBTOOL)
+$(TARGET_PREBUILT_DTBO): $(TARGET_KERNEL_DTB) $(AVBTOOL)
 	echo -e ${CL_GRN}"Building DTBO.img"${CL_RST}
-	$(KERNEL_SRC)/scripts/mkdtboimg.py create $(KERNEL_DTBO_OUT) --page_size=${BOARD_KERNEL_PAGESIZE} `find $(KERNEL_DTB) -name "*.dtbo"`
+	$(KERNEL_SRC_ABS)/scripts/mkdtboimg.py create $(KERNEL_DTBO_OUT) --page_size=${BOARD_KERNEL_PAGESIZE} `find $(KERNEL_DTB) -name "*.dtbo"`
 	$(AVBTOOL) add_hash_footer \
 		--image $@ \
 		--partition_size $(BOARD_DTBOIMG_PARTITION_SIZE) \
@@ -262,14 +336,12 @@ $(TARGET_PREBUILT_DTBO): TARGET_KERNEL_BINARIES $(AVBTOOL)
 endif # TARGET_NEEDS_DTBOIMAGE
 
 ## Install it
-.PHONY: $(PRODUCT_OUT)/kernel
-$(PRODUCT_OUT)/kernel: $(KERNEL_BIN)
-	cp $(KERNEL_BIN) $(PRODUCT_OUT)/kernel
+$(PRODUCT_OUT)/kernel: $(KERNEL_BIN) | $(ACP)
+	$(ACP) $(KERNEL_BIN) $(PRODUCT_OUT)/kernel
 
 ifeq ($(TARGET_NEEDS_DTBOIMAGE),true)
-.PHONY: $(PRODUCT_OUT)/dtbo.img
 $(PRODUCT_OUT)/dtbo.img: $(KERNEL_DTBO_OUT)
-	cp $(KERNEL_DTBO_OUT) $(PRODUCT_OUT)/dtbo.img
+	$(ACP) $(KERNEL_DTBO_OUT) $(PRODUCT_OUT)/dtbo.img
 endif # TARGET_NEEDS_DTBOIMAGE
 
 endif # Sony Kernel version
diff --git a/Makefile b/Makefile
index 5fb1cd195f6c..4fd0ff73365f 100644
--- a/Makefile
+++ b/Makefile
@@ -301,8 +301,8 @@ CONFIG_SHELL := $(shell if [ -x "$$BASH" ]; then echo $$BASH; \
 	  else if [ -x /bin/bash ]; then echo /bin/bash; \
 	  else echo sh; fi ; fi)
 
-HOSTCC       = gcc
-HOSTCXX      = g++
+HOSTCC      ?= gcc
+HOSTCXX     ?= g++
 HOSTCFLAGS   := -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu89
 HOSTCXXFLAGS = -O2
 
@@ -355,7 +355,7 @@ AWK		= awk
 GENKSYMS	= scripts/genksyms/genksyms
 INSTALLKERNEL  := installkernel
 DEPMOD		= /sbin/depmod
-PERL		= perl
+PERL		?= perl
 PYTHON		= python
 CHECK		= sparse
 
diff --git a/backports/compat/Makefile b/backports/compat/Makefile
index bb2537e84254..db1d01b5efeb 100644
--- a/backports/compat/Makefile
+++ b/backports/compat/Makefile
@@ -68,7 +68,7 @@ $(obj)/oid_registry_data.c: $(src)/../include/linux/backport-oid_registry.h \
 	$(call cmd,build_OID_registry)
 
 quiet_cmd_build_OID_registry = GEN     $@
-	cmd_build_OID_registry = perl $(src)/build_OID_registry $< $@
+	cmd_build_OID_registry = $(PERL) $(src)/build_OID_registry $< $@
 compat-$(CONFIG_BACKPORT_BPAUTO_ASN1_DECODER) += lib-asn1_decoder.o
 compat-$(CONFIG_BACKPORT_BPAUTO_BUILD_SYSTEM_DATA_VERIFICATION) += lib-oid_registry.o
 compat-$(CONFIG_BACKPORT_BPAUTO_REFCOUNT) += lib-refcount.o
diff --git a/lib/Makefile b/lib/Makefile
index ec512204e842..8da17c14a4b0 100644
--- a/lib/Makefile
+++ b/lib/Makefile
@@ -224,7 +224,7 @@ $(obj)/oid_registry_data.c: $(srctree)/include/linux/oid_registry.h \
 	$(call cmd,build_OID_registry)
 
 quiet_cmd_build_OID_registry = GEN     $@
-      cmd_build_OID_registry = perl $(srctree)/$(src)/build_OID_registry $< $@
+      cmd_build_OID_registry = $(PERL) $(srctree)/$(src)/build_OID_registry $< $@
 
 clean-files	+= oid_registry_data.c
 
-- 
2.24.1

