From 218c0a3b84538e9312a580c05e47841b6a4f844e Mon Sep 17 00:00:00 2001
From: Anonymous <none@none.none>
Date: Sun, 10 Nov 2019 19:22:52 +0100
Subject: [PATCH] TEMP: Build-able makefile for qr and 4.14

---
 Android.mk           | 263 ++++++++++++++++++++++++++++++-------------
 Makefile             |  45 ++++----
 lib/Makefile         |   2 +-
 scripts/Makefile.lib |   2 +-
 tools/net/Makefile   |   6 +-
 5 files changed, 216 insertions(+), 102 deletions(-)

diff --git a/Android.mk b/Android.mk
index 4303cff3b960..2e2787d7ec1d 100644
--- a/Android.mk
+++ b/Android.mk
@@ -1,5 +1,6 @@
 # Copyright (C) 2012 The CyanogenMod Project
 # Copyright (C) 2015 Chirayu Desai
+# Copyright (C) 2018 Felix Elsner
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -20,21 +21,22 @@ ifeq ($(PRODUCT_PLATFORM_SOD),true)
 ifeq ($(SOMC_KERNEL_VERSION),4.14)
 
 KERNEL_SRC := $(call my-dir)
+# Absolute path - needed for GCC/clang non-AOSP build-system make invocations
+KERNEL_SRC_ABS := $(PWD)/$(call my-dir)
 
 ## Internal variables
-ifeq ($(OUT_DIR),out)
-KERNEL_OUT := $(shell pwd)/$(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ
-else
-KERNEL_OUT := $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ
-endif
+KERNEL_OUT := $(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ-$(SOMC_KERNEL_VERSION)
+# Absolute path - needed for GCC/clang non-AOSP build-system make invocations
+KERNEL_OUT_ABS := $(PWD)/$(TARGET_OUT_INTERMEDIATES)/KERNEL_OBJ-$(SOMC_KERNEL_VERSION)
 KERNEL_CONFIG := $(KERNEL_OUT)/.config
 KERNEL_OUT_STAMP := $(KERNEL_OUT)/.mkdir_stamp
+KERNEL_DTB_STAMP := $(KERNEL_OUT)/.dtb_stamp
 
 TARGET_KERNEL_ARCH := $(strip $(TARGET_KERNEL_ARCH))
 ifeq ($(TARGET_KERNEL_ARCH),)
-KERNEL_ARCH := $(TARGET_ARCH)
+  KERNEL_ARCH := $(TARGET_ARCH)
 else
-KERNEL_ARCH := $(TARGET_KERNEL_ARCH)
+  KERNEL_ARCH := $(TARGET_KERNEL_ARCH)
 endif
 
 # kernel configuration - mandatory:
@@ -46,14 +48,14 @@ KERNEL_DEFCONFIG_SRC := $(KERNEL_SRC)/arch/$(KERNEL_DEFCONFIG_ARCH)/configs/$(KE
 
 TARGET_KERNEL_HEADER_ARCH := $(strip $(TARGET_KERNEL_HEADER_ARCH))
 ifeq ($(TARGET_KERNEL_HEADER_ARCH),)
-KERNEL_HEADER_ARCH := $(KERNEL_ARCH)
+  KERNEL_HEADER_ARCH := $(KERNEL_ARCH)
 else
-KERNEL_HEADER_ARCH := $(TARGET_KERNEL_HEADER_ARCH)
+  KERNEL_HEADER_ARCH := $(TARGET_KERNEL_HEADER_ARCH)
 endif
 
 KERNEL_HEADER_DEFCONFIG := $(strip $(KERNEL_HEADER_DEFCONFIG))
 ifeq ($(KERNEL_HEADER_DEFCONFIG),)
-KERNEL_HEADER_DEFCONFIG := $(KERNEL_DEFCONFIG)
+  KERNEL_HEADER_DEFCONFIG := $(KERNEL_DEFCONFIG)
 endif
 
 ifneq ($(BOARD_KERNEL_IMAGE_NAME),)
@@ -103,29 +105,147 @@ KERNEL_HEADERS_INSTALL_STAMP := $(KERNEL_OUT)/.headers_install_stamp
 KERNEL_MODULES_INSTALL := system
 KERNEL_MODULES_OUT := $(TARGET_OUT)/lib/modules
 
-TARGET_KERNEL_CROSS_COMPILE_PREFIX := $(strip $(TARGET_KERNEL_CROSS_COMPILE_PREFIX))
-ifeq ($(TARGET_KERNEL_CROSS_COMPILE_PREFIX),)
-KERNEL_TOOLCHAIN_PREFIX ?= arm-eabi-
-else
-KERNEL_TOOLCHAIN_PREFIX ?= $(TARGET_KERNEL_CROSS_COMPILE_PREFIX)
+# Set up host toolchains
+# ======================
+
+# clang-r365631 is clang 9.0.3
+CLANG_HOST_TOOLCHAIN := $(PWD)/prebuilts/clang/host/linux-x86/clang-r353983c/bin
+# GCC host toolchain is 4.9 (officially deprecated)
+GCC_HOST_TOOLCHAIN := $(PWD)/prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.17-4.8/x86_64-linux/bin
+GCC_HOST_TOOLCHAIN_LIBEXEC := $(PWD)/prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.17-4.8/libexec/gcc/x86_64-linux/4.8.3
+
+# Needed for absolute paths
+BUILDER_HOME := /home/builder
+# TODO: Make linaro path user-settable
+LINARO_ROOT := $(BUILDER_HOME)/downloads/linaro/gcc-linaro-7.4.1-2019.02-x86_64_aarch64-linux-gnu
+LINARO_TOOLCHAIN := $(LINARO_ROOT)/bin
+LINARO_TOOLCHAIN_PATH := $(LINARO_TOOLCHAIN)/aarch64-linux-gnu-
+LINARO_TOOLCHAIN_LIBEXEC := $(LINARO_ROOT)/libexec/gcc/aarch64-linux-gnu/7.4.1
+
+CLANG_HOSTCC := $(CLANG_HOST_TOOLCHAIN)/clang
+CLANG_HOSTCXX := $(CLANG_HOST_TOOLCHAIN)/clang++
+
+GCC_HOSTCC := $(GCC_HOST_TOOLCHAIN)/gcc
+GCC_HOSTCXX := $(GCC_HOST_TOOLCHAIN)/g++
+GCC_HOSTAR := $(GCC_HOST_TOOLCHAIN)/ar
+GCC_HOSTLD := $(GCC_HOST_TOOLCHAIN)/ld
+
+# Set up cross compilers
+# ======================
+
+GCC_CC := $(PWD)/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android-
+LINARO_CC := $(LINARO_TOOLCHAIN_PATH)gcc
+CLANG_CC := $(CLANG_HOST_TOOLCHAIN)/clang
+
+# Set up target toolchains
+# ========================
+
+# Target toolchain
+GCC_TOOLCHAIN := $(PWD)/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin
+GCC_TOOLCHAIN_32BITS := $(PWD)/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin
+
+KERNEL_TOOLCHAIN := $(GCC_TOOLCHAIN)
+KERNEL_TOOLCHAIN_32BITS := $(GCC_TOOLCHAIN_32BITS)
+
+KERNEL_HOST_TOOLCHAIN := $(GCC_HOST_TOOLCHAIN)
+KERNEL_HOST_TOOLCHAIN_LIBEXEC := $(GCC_HOST_TOOLCHAIN_LIBEXEC)
+
+# On Q, only clang works OOTB as a host bootstrap compiler
+KERNEL_HOSTCC := $(CLANG_HOSTCC)
+KERNEL_HOSTCXX := $(CLANG_HOSTCXX)
+# But you could also use the host system-installed gcc
+#KERNEL_HOSTCC := /usr/bin/gcc
+#KERNEL_HOSTCXX := /usr/bin/g++
+# GCC binutils are still needed
+KERNEL_HOSTAR := $(GCC_HOSTAR)
+KERNEL_HOSTLD := $(GCC_HOSTLD)
+# But we can set linaro's GCC as cross compiler
+KERNEL_CC := $(LINARO_CC)
+
+# Full host GCC -> not possible on Q
+#KERNEL_HOSTCC := $(GCC_HOSTCC)
+#KERNEL_HOSTCXX := $(GCC_HOSTCXX)
+#KERNEL_HOSTAR := $(GCC_HOSTAR)
+#KERNEL_HOSTLD := $(GCC_HOSTLD)
+
+# Target architecture cross compile
+# TEMP: Hardcode
+#TARGET_KERNEL_CROSS_COMPILE_PREFIX := $(strip $(TARGET_KERNEL_CROSS_COMPILE_PREFIX))
+#KERNEL_TOOLCHAIN_PREFIX ?= $(TARGET_KERNEL_CROSS_COMPILE_PREFIX)
+KERNEL_TOOLCHAIN_PREFIX := aarch64-linux-android-
+#KERNEL_TOOLCHAIN_PREFIX := aarch64-linux-gnu-
+#TARGET_KERNEL_CROSS_COMPILE_32BITS_PREFIX := arm-linux-androideabi-
+
+# Kernel toolchain - Use for binutils via $(CROSS_COMPILE)ar, $(CROSS_COMPILE)ld etc.
+ifneq ($(KERNEL_TOOLCHAIN_PREFIX),)
+  KERNEL_TOOLCHAIN_PATH := $(KERNEL_TOOLCHAIN)/$(KERNEL_TOOLCHAIN_PREFIX)
 endif
 
-ifeq ($(KERNEL_TOOLCHAIN),)
-KERNEL_TOOLCHAIN_PATH := $(KERNEL_TOOLCHAIN_PREFIX)
+# If building for 64-bits with VDSO32 support - 32-bit toolchain here
+# Also, if building for AArch64, preferrably set an AArch32 toolchain here.
+TARGET_KERNEL_CROSS_COMPILE_32BITS_PREFIX := $(strip $(TARGET_KERNEL_CROSS_COMPILE_32BITS_PREFIX))
+ifeq ($(TARGET_KERNEL_CROSS_COMPILE_32BITS_PREFIX),)
+  KERNEL_TOOLCHAIN_32BITS_PREFIX := arm-linux-androideabi-
 else
-ifneq ($(KERNEL_TOOLCHAIN_PREFIX),)
-KERNEL_TOOLCHAIN_PATH := $(KERNEL_TOOLCHAIN)/$(KERNEL_TOOLCHAIN_PREFIX)
+  KERNEL_TOOLCHAIN_32BITS_PREFIX := $(TARGET_KERNEL_CROSS_COMPILE_32BITS_PREFIX)
 endif
+
+ifneq ($(KERNEL_TOOLCHAIN_32BITS_PREFIX),)
+  KERNEL_TOOLCHAIN_32BITS_PATH := $(KERNEL_TOOLCHAIN_32BITS)/$(KERNEL_TOOLCHAIN_32BITS_PREFIX)
 endif
 
 ifneq ($(USE_CCACHE),)
-    ccache := $(shell pwd)/prebuilts/misc/$(HOST_PREBUILT_TAG)/ccache/ccache
-    # Check that the executable is here.
-    ccache := $(strip $(wildcard $(ccache)))
+  # On Q, no prebuilt ccache is shipped
+  #ccache := $(PWD)/prebuilts/misc/$(HOST_PREBUILT_TAG)/ccache/ccache
+  ccache := /usr/bin/ccache
+  # Check that the executable is here.
+  ccache := $(strip $(wildcard $(ccache)))
 endif
 
-KERNEL_CROSS_COMPILE := CROSS_COMPILE="$(ccache) $(KERNEL_TOOLCHAIN_PATH)"
-ccache =
+# /usr/bin/perl is more reliable than /bin/perl
+KERNEL_PERL := /usr/bin/perl
+# Set up flex (not allowed by Android's path_interposer)
+KERNEL_FLEX := /usr/bin/flex
+KERNEL_YACC := /usr/bin/bison
+KERNEL_AWK := /usr/bin/awk
+
+KERNEL_CROSS_COMPILE :=
+#ifeq ($(TARGET_KERNEL_CLANG_COMPILE),true)
+#  KERNEL_CROSS_COMPILE += CC="$(CLANG_CC)"
+#  KERNEL_CROSS_COMPILE += CLANG_TRIPLE="aarch64-linux-gnu"
+#endif
+#KERNEL_CROSS_COMPILE += CC="$(CLANG_CC)"
+#KERNEL_CROSS_COMPILE += CC="$(KERNEL_CC)"
+KERNEL_CROSS_COMPILE += HOSTCC="$(KERNEL_HOSTCC)"
+KERNEL_CROSS_COMPILE += HOSTAR="$(KERNEL_HOSTAR)"
+KERNEL_CROSS_COMPILE += HOSTLD="$(KERNEL_HOSTLD)"
+KERNEL_CROSS_COMPILE += HOSTCXX="$(KERNEL_HOSTCXX)"
+# Host tools
+KERNEL_CROSS_COMPILE += PERL=$(KERNEL_PERL)
+KERNEL_CROSS_COMPILE += LEX=$(KERNEL_FLEX)
+KERNEL_CROSS_COMPILE += YACC=$(KERNEL_YACC)
+KERNEL_CROSS_COMPILE += AWK=$(KERNEL_AWK)
+ifneq ($(USE_CCACHE),)
+  KERNEL_CROSS_COMPILE += CROSS_COMPILE="$(ccache) $(KERNEL_TOOLCHAIN_PATH)"
+  KERNEL_CROSS_COMPILE += CROSS_COMPILE_ARM32="$(ccache) $(KERNEL_TOOLCHAIN_32BITS_PATH)"
+else
+  KERNEL_CROSS_COMPILE += CROSS_COMPILE="$(KERNEL_TOOLCHAIN_PATH)"
+  KERNEL_CROSS_COMPILE += CROSS_COMPILE_ARM32="$(KERNEL_TOOLCHAIN_32BITS_PATH)"
+endif
+#KERNEL_CROSS_COMPILE += CROSS_COMPILE="$(KERNEL_TOOLCHAIN_PATH)"
+#KERNEL_CROSS_COMPILE += CROSS_COMPILE_ARM32="$(KERNEL_TOOLCHAIN_32BITS_PATH)"
+
+# Standard $(MAKE) evaluates to:
+# prebuilts/build-tools/linux-x86/bin/ckati --color_warnings --kati_stats MAKECMDGOALS=
+# which is forbidden by Android Q's new "path_interposer" tool
+KERNEL_PREBUILT_MAKE := $(PWD)/prebuilts/build-tools/linux-x86/bin/make
+# clang/GCC (glibc) host toolchain needs to be prepended to $PATH for certain
+# host bootstrap tools to be built. Also, binutils such as `ld` and `ar` are
+# needed for now.
+KERNEL_MAKE_EXTRA_PATH := "$(KERNEL_HOST_TOOLCHAIN):$(KERNEL_HOST_TOOLCHAIN_LIBEXEC)"
+KERNEL_MAKE := \
+	PATH="$(KERNEL_MAKE_EXTRA_PATH):$$PATH" \
+	$(KERNEL_PREBUILT_MAKE)
 
 define mv-modules
     mdpath=`find $(KERNEL_MODULES_OUT) -type f -name modules.order`;\
@@ -144,18 +264,6 @@ define clean-module-folder
     fi
 endef
 
-ifeq ($(HOST_OS),darwin)
-ifeq (1,$(filter 1,$(shell echo "$$(( $(PLATFORM_SDK_VERSION) >= 24 ))" )))
-  MAKE_FLAGS += C_INCLUDE_PATH=$(shell pwd)/external/elfutils/libelf/
-else
-  MAKE_FLAGS += C_INCLUDE_PATH=$(shell pwd)/external/elfutils/src/libelf/
-endif
-endif
-
-ifeq ($(TARGET_KERNEL_MODULES),)
-    TARGET_KERNEL_MODULES := no-external-modules
-endif
-
 $(KERNEL_OUT_STAMP):
 	$(hide) mkdir -p $(KERNEL_OUT)
 	$(hide) rm -rf $(KERNEL_MODULES_OUT)
@@ -167,74 +275,79 @@ $(KERNEL_OUT_STAMP):
 
 $(KERNEL_CONFIG): $(KERNEL_OUT_STAMP) $(KERNEL_DEFCONFIG_SRC)
 	@echo "Building Kernel Config"
-	$(MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_DEFCONFIG)
-	$(hide) if [ ! -z "$(KERNEL_CONFIG_OVERRIDE)" ]; then \
-			echo "Overriding kernel config with '$(KERNEL_CONFIG_OVERRIDE)'"; \
-			echo $(KERNEL_CONFIG_OVERRIDE) >> $(KERNEL_OUT)/.config; \
-			$(MAKE) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) oldconfig; fi
+	$(KERNEL_MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_DEFCONFIG)
 
-TARGET_KERNEL_BINARIES: $(KERNEL_OUT_STAMP) $(KERNEL_CONFIG) $(KERNEL_HEADERS_INSTALL_STAMP) | $(ACP)
-	@echo "Building Kernel"
-	$(MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(TARGET_PREBUILT_INT_KERNEL_TYPE)
-	$(hide) if grep -q 'CONFIG_OF=y' $(KERNEL_CONFIG) ; \
-			then \
-				echo "Building DTBs" ; \
-				$(MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) dtbs ; \
-			else \
-				echo "DTBs not enabled" ; \
-			fi ;
-	$(ACP) -fp $(KERNEL_DTB)/*.dtb $(KERNEL_DTB_OUT)/
+# TODO: Use non-PHONY target for qcom wifi modules
+ifeq ($(TARGET_KERNEL_MODULES),)
+    TARGET_KERNEL_MODULES := no-external-modules
+endif
+.PHONY: $(TARGET_KERNEL_MODULES)
+$(TARGET_KERNEL_MODULES):
 	$(hide) if grep -q 'CONFIG_MODULES=y' $(KERNEL_CONFIG) ; \
 			then \
 				echo "Building Kernel Modules" ; \
-				$(MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) modules && \
-				$(MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC) O=$(KERNEL_OUT) INSTALL_MOD_PATH=../../$(KERNEL_MODULES_INSTALL) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) modules_install && \
+				$(KERNEL_MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) modules && \
+				$(KERNEL_MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) INSTALL_MOD_PATH=../../$(KERNEL_MODULES_INSTALL) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) modules_install && \
 				$(mv-modules) && \
 				$(clean-module-folder) ; \
 			else \
 				echo "Kernel Modules not enabled" ; \
 			fi ;
 
-$(TARGET_KERNEL_MODULES): TARGET_KERNEL_BINARIES
+$(TARGET_PREBUILT_INT_KERNEL): $(KERNEL_OUT_STAMP) $(KERNEL_CONFIG) $(KERNEL_HEADERS_INSTALL_STAMP)
+	@echo "Building Kernel"
+	$(KERNEL_MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(TARGET_PREBUILT_INT_KERNEL_TYPE)
+
+$(KERNEL_DTB_STAMP): $(KERNEL_OUT_STAMP) $(KERNEL_CONFIG) | $(ACP)
+	$(hide) if grep -q 'CONFIG_OF=y' $(KERNEL_CONFIG) ; \
+			then \
+				echo "Building DTBs" ; \
+				$(KERNEL_MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) dtbs ; \
+			else \
+				echo "DTBs not enabled" ; \
+			fi ;
+	$(ACP) -fp $(KERNEL_DTB)/*.dtb $(KERNEL_DTB_OUT)/
+	$(hide) touch $@
 
-$(TARGET_PREBUILT_INT_KERNEL): $(TARGET_KERNEL_MODULES)
-	$(mv-modules)
-	$(clean-module-folder)
+$(TARGET_KERNEL_DTB): $(KERNEL_DTB_STAMP)
 
 $(KERNEL_HEADERS_INSTALL_STAMP): $(KERNEL_OUT_STAMP) $(KERNEL_CONFIG)
 	@echo "Building Kernel Headers"
 	$(hide) if [ ! -z "$(KERNEL_HEADER_DEFCONFIG)" ]; then \
 			rm -f ../$(KERNEL_CONFIG); \
-			$(MAKE) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_HEADER_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_HEADER_DEFCONFIG); \
-			$(MAKE) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_HEADER_ARCH) $(KERNEL_CROSS_COMPILE) headers_install; fi
+			$(KERNEL_MAKE) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_HEADER_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_HEADER_DEFCONFIG); \
+			$(KERNEL_MAKE) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_HEADER_ARCH) $(KERNEL_CROSS_COMPILE) headers_install; fi
 	$(hide) if [ "$(KERNEL_HEADER_DEFCONFIG)" != "$(KERNEL_DEFCONFIG)" ]; then \
 			echo "Used a different defconfig for header generation"; \
 			rm -f ../$(KERNEL_CONFIG); \
-			$(MAKE) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_DEFCONFIG); fi
+			$(KERNEL_MAKE) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_DEFCONFIG); fi
 	$(hide) if [ ! -z "$(KERNEL_CONFIG_OVERRIDE)" ]; then \
 			echo "Overriding kernel config with '$(KERNEL_CONFIG_OVERRIDE)'"; \
-			echo $(KERNEL_CONFIG_OVERRIDE) >> $(KERNEL_OUT)/.config; \
-			$(MAKE) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) oldconfig; fi
+			echo $(KERNEL_CONFIG_OVERRIDE) >> $(KERNEL_OUT_ABS)/.config; \
+			$(KERNEL_MAKE) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) oldconfig; fi
+	$(hide) touch $@
 
 # provide this rule because there are dependencies on this throughout the repo
 $(KERNEL_HEADERS_INSTALL): $(KERNEL_HEADERS_INSTALL_STAMP)
 
+.PHONY: kerneltags
 kerneltags: $(KERNEL_OUT_STAMP) $(KERNEL_CONFIG)
-	$(MAKE) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) tags
+	$(KERNEL_MAKE) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) tags
 
-kernelconfig: $(KERNEL_OUT_STAMP)
-	$(MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_DEFCONFIG)
+.PHONY: kernelconfig
+kernelconfig: $(KERNEL_OUT_STAMP) | $(ACP)
+	$(KERNEL_MAKE) $(MAKE_FLAGS) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) $(KERNEL_DEFCONFIG)
 	env KCONFIG_NOTIMESTAMP=true \
-		 $(MAKE) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) menuconfig
+		 $(KERNEL_MAKE) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) menuconfig
 	env KCONFIG_NOTIMESTAMP=true \
-		 $(MAKE) -C $(KERNEL_SRC) O=$(KERNEL_OUT) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) savedefconfig
-	cp $(KERNEL_OUT)/defconfig $(KERNEL_DEFCONFIG_SRC)
+		 $(KERNEL_MAKE) -C $(KERNEL_SRC_ABS) O=$(KERNEL_OUT_ABS) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) savedefconfig
+	$(ACP) $(KERNEL_OUT)/defconfig $(KERNEL_DEFCONFIG_SRC)
 
 ifeq ($(TARGET_NEEDS_DTBOIMAGE),true)
 TARGET_PREBUILT_DTBO := $(KERNEL_DTBO_OUT)
-$(TARGET_PREBUILT_DTBO): TARGET_KERNEL_BINARIES $(AVBTOOL)
+$(TARGET_PREBUILT_DTBO): $(TARGET_KERNEL_DTB) $(AVBTOOL)
 	echo -e ${CL_GRN}"Building DTBO.img"${CL_RST}
-	$(KERNEL_SRC)/scripts/mkdtboimg.py create $(KERNEL_DTBO_OUT) --page_size=${BOARD_KERNEL_PAGESIZE} `find $(KERNEL_DTB) -name "*.dtbo"`
+	$(KERNEL_SRC_ABS)/scripts/mkdtboimg.py create $(KERNEL_DTBO_OUT) --page_size=${BOARD_KERNEL_PAGESIZE} `find $(KERNEL_DTB) -name "*.dtbo"`
 	$(AVBTOOL) add_hash_footer \
 		--image $@ \
 		--partition_size $(BOARD_DTBOIMG_PARTITION_SIZE) \
@@ -243,14 +356,12 @@ $(TARGET_PREBUILT_DTBO): TARGET_KERNEL_BINARIES $(AVBTOOL)
 endif # TARGET_NEEDS_DTBOIMAGE
 
 ## Install it
-.PHONY: $(PRODUCT_OUT)/kernel
-$(PRODUCT_OUT)/kernel: $(KERNEL_BIN)
-	cp $(KERNEL_BIN) $(PRODUCT_OUT)/kernel
+$(PRODUCT_OUT)/kernel: $(KERNEL_BIN) | $(ACP)
+	$(ACP) $(KERNEL_BIN) $(PRODUCT_OUT)/kernel
 
 ifeq ($(TARGET_NEEDS_DTBOIMAGE),true)
-.PHONY: $(PRODUCT_OUT)/dtbo.img
 $(PRODUCT_OUT)/dtbo.img: $(KERNEL_DTBO_OUT)
-	cp $(KERNEL_DTBO_OUT) $(PRODUCT_OUT)/dtbo.img
+	$(ACP) $(KERNEL_DTBO_OUT) $(PRODUCT_OUT)/dtbo.img
 endif # TARGET_NEEDS_DTBOIMAGE
 
 endif # Sony Kernel version
diff --git a/Makefile b/Makefile
index e377a9da46b7..6d723209e4dd 100644
--- a/Makefile
+++ b/Makefile
@@ -361,8 +361,10 @@ HOST_LFS_CFLAGS := $(shell getconf LFS_CFLAGS 2>/dev/null)
 HOST_LFS_LDFLAGS := $(shell getconf LFS_LDFLAGS 2>/dev/null)
 HOST_LFS_LIBS := $(shell getconf LFS_LIBS 2>/dev/null)
 
-HOSTCC       = gcc
-HOSTCXX      = g++
+HOSTCC       = $(HOSTCC)
+HOSTCXX      = $(HOSTCXX)
+#HOSTCC       = /usr/bin/gcc
+#HOSTCXX      = /usr/bin/g++
 HOSTCFLAGS   := -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 \
 		-fomit-frame-pointer -std=gnu89 $(HOST_LFS_CFLAGS)
 HOSTCXXFLAGS := -O2 $(HOST_LFS_CFLAGS)
@@ -375,25 +377,26 @@ HOSTCFLAGS  += -Wno-unused-value -Wno-unused-parameter \
 endif
 
 # Make variables (CC, etc...)
-AS		= $(CROSS_COMPILE)as
-LD		= $(CROSS_COMPILE)ld
-CC		= $(CROSS_COMPILE)gcc
-LDGOLD		= $(CROSS_COMPILE)ld.gold
-CPP		= $(CC) -E
-AR		= $(CROSS_COMPILE)ar
-NM		= $(CROSS_COMPILE)nm
-STRIP		= $(CROSS_COMPILE)strip
-OBJCOPY		= $(CROSS_COMPILE)objcopy
-OBJDUMP		= $(CROSS_COMPILE)objdump
-LEX		= flex
-YACC		= bison
-AWK		= awk
-GENKSYMS	= scripts/genksyms/genksyms
-INSTALLKERNEL  := installkernel
-DEPMOD		= /sbin/depmod
-PERL		= perl
-PYTHON		= python
-CHECK		= sparse
+AS              = $(CROSS_COMPILE)as
+LD              = $(CROSS_COMPILE)ld
+CC              = $(CROSS_COMPILE)gcc
+LDGOLD          = $(CROSS_COMPILE)ld.gold
+CPP             = $(CC) -E
+AR              = $(CROSS_COMPILE)ar
+NM              = $(CROSS_COMPILE)nm
+STRIP           = $(CROSS_COMPILE)strip
+OBJCOPY         = $(CROSS_COMPILE)objcopy
+OBJDUMP         = $(CROSS_COMPILE)objdump
+LEX             = $(LEX)
+YACC            = $(YACC)
+BISON           = $(YACC)
+AWK             = $(AWK)
+GENKSYMS        = scripts/genksyms/genksyms
+INSTALLKERNEL   := installkernel
+DEPMOD          = /sbin/depmod
+PERL            = $(PERL)
+PYTHON          = python
+CHECK           = sparse
 
 CHECKFLAGS     := -D__linux__ -Dlinux -D__STDC__ -Dunix -D__unix__ \
 		  -Wbitwise -Wno-return-void $(CF)
diff --git a/lib/Makefile b/lib/Makefile
index dbacf0c95d33..fd6e3bc30fd4 100644
--- a/lib/Makefile
+++ b/lib/Makefile
@@ -237,7 +237,7 @@ $(obj)/oid_registry_data.c: $(srctree)/include/linux/oid_registry.h \
 	$(call cmd,build_OID_registry)
 
 quiet_cmd_build_OID_registry = GEN     $@
-      cmd_build_OID_registry = perl $(srctree)/$(src)/build_OID_registry $< $@
+      cmd_build_OID_registry = $(PERL) $(srctree)/$(src)/build_OID_registry $< $@
 
 clean-files	+= oid_registry_data.c
 
diff --git a/scripts/Makefile.lib b/scripts/Makefile.lib
index 1a05f4af6a96..2d68d25b08f5 100644
--- a/scripts/Makefile.lib
+++ b/scripts/Makefile.lib
@@ -228,7 +228,7 @@ $(filter %.tab.c,$(targets)): $(obj)/%.tab.c: $(src)/%.y FORCE
 	$(call if_changed,bison)
 
 quiet_cmd_bison_h = YACC    $@
-      cmd_bison_h = bison -o/dev/null --defines=$@ -t -l -p $(YACC_PREFIX) $<
+      cmd_bison_h = $(YACC) -o/dev/null --defines=$@ -t -l -p $(YACC_PREFIX) $<
 
 ifdef REGENERATE_PARSERS
 .PRECIOUS: $(src)/%.tab.h_shipped
diff --git a/tools/net/Makefile b/tools/net/Makefile
index 5830670feae1..bc2e13b5dc6f 100644
--- a/tools/net/Makefile
+++ b/tools/net/Makefile
@@ -1,9 +1,9 @@
 # SPDX-License-Identifier: GPL-2.0
 prefix = /usr
 
-CC = gcc
-LEX = flex
-YACC = bison
+CC ?= gcc
+LEX ?= flex
+YACC ?= bison
 
 CFLAGS += -Wall -O2
 CFLAGS += -D__EXPORTED_HEADERS__ -I../../include/uapi -I../../include
-- 
2.24.0

