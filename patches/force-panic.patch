From 9a239de1e52429ba82fc6ece9d1d28aef285e7e7 Mon Sep 17 00:00:00 2001
From: local__hero <none@none.none>
Date: Sat, 10 Nov 2018 13:10:22 +0100
Subject: [PATCH 2/2] Force panic on restart to get pstore

---
 drivers/power/reset/msm-poweroff.c | 152 +----------------------------
 1 file changed, 5 insertions(+), 147 deletions(-)

diff --git a/drivers/power/reset/msm-poweroff.c b/drivers/power/reset/msm-poweroff.c
index 3061f94b405d..977670737800 100644
--- a/drivers/power/reset/msm-poweroff.c
+++ b/drivers/power/reset/msm-poweroff.c
@@ -262,153 +262,11 @@ static void halt_spmi_pmic_arbiter(void)
 
 static void msm_restart_prepare(const char *cmd)
 {
-	bool need_warm_reset = false;
-#ifdef CONFIG_QCOM_DLOAD_MODE
-	/* Write download mode flags if we're panic'ing
-	 * Write download mode flags if restart_mode says so
-	 * Kill download mode if master-kill switch is set
-	 */
-
-	set_dload_mode(download_mode &&
-			(in_panic || restart_mode == RESTART_DLOAD));
-#else
-	set_dload_mode(0);
-#endif
-
-	if (qpnp_pon_check_hard_reset_stored()) {
-		/* Set warm reset as true when device is in dload mode */
-		if (get_dload_mode() ||
-			((cmd != NULL && cmd[0] != '\0') &&
-			!strcmp(cmd, "edl")))
-			need_warm_reset = true;
-	} else {
-		need_warm_reset = (get_dload_mode() ||
-				(cmd != NULL && cmd[0] != '\0'));
-	}
-
-#if defined(TARGET_SOMC_XBOOT)
-	/* Force warm reset and allow device to
-	 * preserve memory on restart for kernel
-	 * panic or for bootloader and recovery
-	 * commands */
-	if (cmd != NULL) {
-		if ((!strncmp(cmd, "bootloader", 10)) ||
-		    (!strncmp(cmd, "recovery", 8)) || in_panic)
-			need_warm_reset = true;
-		else
-			need_warm_reset = false;
-	}
-#elif defined(TARGET_SOMC_S1BOOT)
-	need_warm_reset = true;
-#endif
-
-	if (need_warm_reset)
-		qpnp_pon_system_pwr_off(PON_POWER_OFF_WARM_RESET);
-	else
-		qpnp_pon_system_pwr_off(PON_POWER_OFF_HARD_RESET);
-
-#if defined(TARGET_SOMC_XBOOT)
-	if (in_panic) {
-		qpnp_pon_system_pwr_off(PON_POWER_OFF_WARM_RESET);
-		__raw_writel(0xC0DEDEAD, restart_reason);
-		qpnp_pon_set_restart_reason(PON_RESTART_REASON_KERNEL_PANIC);
-		flush_cache_all();
-
-		return;
-	}
-#endif
-
-	if (cmd != NULL) {
-		if (!strncmp(cmd, "bootloader", 10)) {
-			qpnp_pon_set_restart_reason(
-				PON_RESTART_REASON_BOOTLOADER);
-			__raw_writel(0x77665500, restart_reason);
-		} else if (!strncmp(cmd, "recovery", 8)) {
-#if defined(TARGET_SOMC_XBOOT) && !defined(TARGET_SOMC_XBOOT_FEATURE_AB)
-			qpnp_pon_set_restart_reason(
-				PON_RESTART_REASON_OEM_F);
-			__raw_writel(0x6f656d46, restart_reason); //oem-F
-#elif defined(TARGET_SOMC_S1BOOT)
-			qpnp_pon_set_restart_reason(
-				PON_RESTART_REASON_RECOVERY);
-			__raw_writel(0x6f656d46, restart_reason); //oem-46
-#else
-			qpnp_pon_set_restart_reason(
-				PON_RESTART_REASON_RECOVERY);
-			__raw_writel(0x77665502, restart_reason);
-#endif
-		} else if (!strcmp(cmd, "rtc")) {
-			qpnp_pon_set_restart_reason(
-				PON_RESTART_REASON_RTC);
-			__raw_writel(0x77665503, restart_reason);
-		} else if (!strcmp(cmd, "dm-verity device corrupted")) {
-			qpnp_pon_set_restart_reason(
-				PON_RESTART_REASON_DMVERITY_CORRUPTED);
-			__raw_writel(0x77665508, restart_reason);
-		} else if (!strcmp(cmd, "dm-verity enforcing")) {
-			qpnp_pon_set_restart_reason(
-				PON_RESTART_REASON_DMVERITY_ENFORCE);
-			__raw_writel(0x77665509, restart_reason);
-		} else if (!strcmp(cmd, "keys clear")) {
-			qpnp_pon_set_restart_reason(
-				PON_RESTART_REASON_KEYS_CLEAR);
-			__raw_writel(0x7766550a, restart_reason);
-		} else if (!strncmp(cmd, "s1bootloader", 12)) {
-			__raw_writel(0x6f656d53, restart_reason);
-		} else if (!strncmp(cmd, "oem-", 4)) {
-			unsigned long code;
-			unsigned long reset_reason;
-			int ret;
-
-			ret = kstrtoul(cmd + 4, 16, &code);
-			if (!ret) {
-				/* Bit-2 to bit-7 of SOFT_RB_SPARE for hard
-				 * reset reason:
-				 * Value 0 to 31 for common defined features
-				 * Value 32 to 63 for oem specific features
-				 */
-				reset_reason = code +
-						PON_RESTART_REASON_OEM_MIN;
-				if (reset_reason > PON_RESTART_REASON_OEM_MAX ||
-				   reset_reason < PON_RESTART_REASON_OEM_MIN) {
-					pr_err("Invalid oem reset reason: %lx\n",
-						reset_reason);
-				} else {
-					qpnp_pon_set_restart_reason(
-						reset_reason);
-				}
-				__raw_writel(0x6f656d00 | (code & 0xff),
-					     restart_reason);
-			}
-		} else if (!strncmp(cmd, "edl", 3)) {
-			enable_emergency_dload_mode();
-		} else {
-			pr_notice("%s : cmd is %s, set to reboot mode\n", __func__, cmd);
-#if defined(TARGET_SOMC_XBOOT) || defined(TARGET_SOMC_S1BOOT)
-			qpnp_pon_set_restart_reason(PON_RESTART_REASON_UNKNOWN);
-#else
-			qpnp_pon_set_restart_reason(PON_RESTART_REASON_REBOOT);
-#endif
-			__raw_writel(0x77665501, restart_reason);
-		}
-	} else {
-		pr_notice("%s : cmd is NULL, set to reboot mode\n", __func__);
-#if defined(TARGET_SOMC_XBOOT) || defined(TARGET_SOMC_S1BOOT)
-		qpnp_pon_set_restart_reason(PON_RESTART_REASON_UNKNOWN);
-		__raw_writel(0x77665501, restart_reason);
-#else
-		qpnp_pon_set_restart_reason(PON_RESTART_REASON_REBOOT);
-		__raw_writel(0x776655AA, restart_reason);
-#endif
-	}
-
-	flush_cache_all();
-
-	/*outer_flush_all is not supported by 64bit kernel*/
-#ifndef CONFIG_ARM64
-	outer_flush_all();
-#endif
-
+    /* Always panic to get pstore */
+qpnp_pon_system_pwr_off(PON_POWER_OFF_WARM_RESET);
+qpnp_pon_set_restart_reason(PON_RESTART_REASON_UNKNOWN);
+        __raw_writel(0x77665501, restart_reason);
+flush_cache_all();
 }
 
 /*
-- 
2.19.1

